name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  pull_request:
    branches:
      - main
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Parse version from package.json
        id: parse_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version exists in releases
        id: check_version
        run: |
          VERSION_EXISTS=$(gh release list | grep -c "v${{ env.VERSION }}")
          echo "VERSION_EXISTS=$VERSION_EXISTS" >> $GITHUB_ENV

      - name: Abandon if version exists
        if: env.VERSION_EXISTS != '0'
        run: |
          echo "Version ${{ env.VERSION }} already exists. Abandoning."
          exit 0

      - name: Update version in manifest.json
        run: |
          jq --arg version "$VERSION" '.version = $version' manifest.json > manifest.tmp.json
          mv manifest.tmp.json manifest.json

      - name: Build the project
        run: npm run build

      - name: Gather output
        run: |
          mkdir -p output
          cp -r dist/* output/
          cp manifest.json output/

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" ./output/* --title "Release ${{ env.VERSION }}" --notes "Automated release of version ${{ env.VERSION }}"
